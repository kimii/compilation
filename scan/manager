#!/bin/bash
vp_conf(){
  cat config.json | tr '\n' ' ' | python -c "import json,sys; o=json.loads(raw_input()); [sys.stdout.write(k+' '+v+'\n') for k,v in o['manager']['vp']['$1'].items()]" \
  | grep $2 | cut -d' ' -f2
}

# traceroute
start_trace(){
  target_file_path=$1
  vp=$2

  username=$(vp_conf $vp username); ip=$(vp_conf $vp ip); ssh_port=$(vp_conf $vp ssh_port); printf -v password "%q" "$(vp_conf $vp password)";
  data_dir=$(vp_conf $vp data_dir); code_dir=$(vp_conf $vp code_dir);

  expect -c "set timeout -1
  spawn ssh $username@$ip -p $ssh_port \"mkdir -p $data_dir\"
  expect -re \".*password.*\" {send \"$password\r\"}
  expect eof"

  expect -c "set timeout -1
  spawn scp -P $ssh_port $target_file_path $username@$ip:$data_dir
  expect -re \".*password.*\" {send \"$password\r\"}
  expect eof"

  expect -c "set timeout -1
  spawn ssh $username@$ip -p $ssh_port \"$code_dir/prober tr $data_dir/$(basename $target_file_path)\"
  expect -re \".*password.*\" {send \"$password\r\"}
  expect eof"
}

sync_file(){
  target_file_path=$1
  vp=$2
  directory=$3

  prefix=$(echo $target_file_path | sed 's/\.targets$//')
  username=$(vp_conf $vp username); ip=$(vp_conf $vp ip); ssh_port=$(vp_conf $vp ssh_port); printf -v password "%q" "$(vp_conf $vp password)";
  data_dir=$(vp_conf $vp data_dir); code_dir=$(vp_conf $vp code_dir)

  expect -c "set timeout -1
  spawn rsync -avrt --copy-links -e \"ssh -p $ssh_port\" $username@$ip:$data_dir/$(basename $prefix).warts $directory
  expect -re \".*password.*\" {send \"$password\r\"}
  expect eof"
  
  expect -c "set timeout -1
  spawn ssh $username@$ip -p $ssh_port \"$code_dir/prober check $data_dir/$(basename $prefix)\"
  expect -re \".*password.*\" {send \"$password\r\"}
  expect eof"
}

delete_warts_file(){
  target_file_path=$1
  vp=$2
  directory=$3

  prefix=$(echo $target_file_path | sed 's/\.targets$//')
  username=$(vp_conf $vp username); ip=$(vp_conf $vp ip); ssh_port=$(vp_conf $vp ssh_port); printf -v password "%q" "$(vp_conf $vp password)";
  data_dir=$(vp_conf $vp data_dir); code_dir=$(vp_conf $vp code_dir)

  gzip $directory/$(basename $prefix).warts

  expect -c "set timeout -1
  spawn ssh $username@$ip -p $ssh_port \"$code_dir/prober delete $data_dir/$(basename $prefix).warts $data_dir/$(basename $prefix).log\"
  expect -re \".*password.*\" {send \"$password\r\"}
  expect eof"

  expect -c "set timeout -1
  spawn ssh $username@$ip -p $ssh_port \"$code_dir/prober delete $data_dir/$(basename $prefix).targets $data_dir/$(basename $prefix).log\"
  expect -re \".*password.*\" {send \"$password\r\"}
  expect eof"
}

run_trace(){
  target_file_path=$1
  vp=$2
  directory=$3

  #start
  read r < <(start_trace $target_file_path $vp | tee >(tail -n1) >&2 | python -c "import json; o=json.loads(raw_input()); print o['status']")
  test $r -ne 0 && exit
  #periodically sync
  while true; do
    read r < <(sync_file $target_file_path $vp $directory | tee >(tail -n1) >&2 | python -c "import json; o=json.loads(raw_input()); print o['finished']")
    test "$r"x == "True"x && delete_warts_file $target_file_path $vp $directory
    test "$r"x == "True"x && break
    sleep 10
  done
}

# alias resolution
start_ar(){
  ifaces_file_path=$1
  vp=$2

  username=$(vp_conf $vp username); ip=$(vp_conf $vp ip); ssh_port=$(vp_conf $vp ssh_port); printf -v password "%q" "$(vp_conf $vp password)";
  data_dir=$(vp_conf $vp data_dir); code_dir=$(vp_conf $vp code_dir);

  expect -c "set timeout -1
  spawn ssh $username@$ip -p $ssh_port \"mkdir -p $data_dir\"
  expect -re \".*password.*\" {send \"$password\r\"}
  expect eof"

  expect -c "set timeout -1
  spawn scp -P $ssh_port $ifaces_file_path $username@$ip:$data_dir
  expect -re \".*password.*\" {send \"$password\r\"}
  expect eof"

  expect -c "set timeout -1
  spawn ssh $username@$ip -p $ssh_port \"$code_dir/prober ar $data_dir/$(basename $ifaces_file_path)\"
  expect -re \".*password.*\" {send \"$password\r\"}
  expect eof"
}

check_ar(){
  ifaces_file_path=$1
  vp=$2
  directory=$3

  prefix=$(echo $ifaces_file_path | sed 's/\.ifaces$//')
  username=$(vp_conf $vp username); ip=$(vp_conf $vp ip); ssh_port=$(vp_conf $vp ssh_port); printf -v password "%q" "$(vp_conf $vp password)";
  data_dir=$(vp_conf $vp data_dir); code_dir=$(vp_conf $vp code_dir)

  expect -c "set timeout -1
  spawn ssh $username@$ip -p $ssh_port \"$code_dir/prober check $data_dir/$(basename $prefix).ar\"
  expect -re \".*password.*\" {send \"$password\r\"}
  expect eof"
}

delete_iffout_file(){
  ifaces_file_path=$1
  vp=$2
  directory=$3

  prefix=$(echo $ifaces_file_path | sed 's/\.ifaces$//')
  username=$(vp_conf $vp username); ip=$(vp_conf $vp ip); ssh_port=$(vp_conf $vp ssh_port); printf -v password "%q" "$(vp_conf $vp password)";
  data_dir=$(vp_conf $vp data_dir); code_dir=$(vp_conf $vp code_dir)

  #fetch out
  expect -c "set timeout -1
  spawn rsync -avrt --copy-links -e \"ssh -p $ssh_port\" $username@$ip:$data_dir/$(basename $prefix).out $directory
  expect -re \".*password.*\" {send \"$password\r\"}
  expect eof"

  #delete iffout, ifferr and ifaces
  expect -c "set timeout -1
  spawn ssh $username@$ip -p $ssh_port \"$code_dir/prober delete $data_dir/$(basename $prefix).out $data_dir/$(basename $prefix).ar.log\"
  expect -re \".*password.*\" {send \"$password\r\"}
  expect eof"

  expect -c "set timeout -1
  spawn ssh $username@$ip -p $ssh_port \"$code_dir/prober delete $data_dir/$(basename $prefix).err $data_dir/$(basename $prefix).ar.log\"
  expect -re \".*password.*\" {send \"$password\r\"}
  expect eof"

  expect -c "set timeout -1
  spawn ssh $username@$ip -p $ssh_port \"$code_dir/prober delete $data_dir/$(basename $prefix).ifaces $data_dir/$(basename $prefix).ar.log\"
  expect -re \".*password.*\" {send \"$password\r\"}
  expect eof"
}

run_ar(){
  ifaces_file_path=$1
  vp=$2
  directory=$3

  #start
  read r < <(start_ar $ifaces_file_path $vp | tee >(tail -n1) >&2 | python -c "import json; o=json.loads(raw_input()); print o['status']")
  test $r -ne 0 && exit
  #periodically sync
  while true; do
    read r < <(check_ar $ifaces_file_path $vp $directory | tee >(tail -n1) >&2 | python -c "import json; o=json.loads(raw_input()); print o['finished']")
    test "$r"x == "True"x && delete_iffout_file $ifaces_file_path $vp $directory
    test "$r"x == "True"x && break
    sleep 10
  done
}

usage(){
  echo "manager <\$commands> [\$args...]"
  echo "COMMANDS:"
  echo "  run_trace <\$vp> <\$directory>"
}

test $# -lt 1 && usage && exit

cmd=$1
case $cmd in
  "run_trace")
    test $# -lt 3 && usage && exit
    vp=$2
    directory=$(realpath $3)
    mkdir -p $directory
    date=$(date +%Y%m%d-%H:%M:%S)
    
    wd=$(pwd); cd target/
    ./target.sh gen_target_from_geodb -p $directory/$date.$vp
    cd $wd
    
    run_trace $directory/$date.$vp.targets $vp $directory

    #wd=$(pwd); cd ../analyze;
    #./run.sh warts2link $directory/$date.$vp.warts.gz;
    #./run.sh link2iface $directory/$date.$vp.links;
    #cd $wd;

    #run_ar $directory/$date.$vp.ifaces $vp $directory
    ;;
  "specific_target")
    test $# -lt 3 && usage && exit
    vp=$2
    file=$3
    directory=$(dirname $3)
    date=$(date +%Y%m%d-%H:%M:%S)
    cp $file $directory/$date.$vp.targets 
    run_trace $directory/$date.$vp.targets $vp $directory
    ;;  
  "*")
    usage
    exit
    ;;
esac
